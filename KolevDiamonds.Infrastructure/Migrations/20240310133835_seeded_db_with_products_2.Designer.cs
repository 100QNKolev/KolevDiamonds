// <auto-generated />
using System;
using KolevDiamonds.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KolevDiamonds.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240310133835_seeded_db_with_products_2")]
    partial class seeded_db_with_products_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KolevDiamonds.Infrastructure.Data.Models.InvestmentCoin", b =>
                {
                    b.Property<int>("CoinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Coin unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoinId"), 1L, 1);

                    b.Property<int>("Circulation")
                        .HasColumnType("int")
                        .HasComment("Number of pieces in circulation");

                    b.Property<string>("CoinImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Server file system image path");

                    b.Property<string>("CoinName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Name of the coin");

                    b.Property<double>("Diameter")
                        .HasColumnType("float")
                        .HasComment("Diameter of the coin in millimeters");

                    b.Property<string>("LegalTender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Legal tender value in the specified currency");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Manufacturer of the coin");

                    b.Property<int>("Metal")
                        .HasColumnType("int")
                        .HasComment("Type of metal");

                    b.Property<string>("Packaging")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Packaging for the coin");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the product");

                    b.Property<double>("Purity")
                        .HasColumnType("float")
                        .HasComment("Purity of the metal expressed as a ratio");

                    b.Property<int>("Quality")
                        .HasColumnType("int")
                        .HasComment("Quality of the metal");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasComment("Weight of the metal in grams");

                    b.HasKey("CoinId");

                    b.ToTable("InvestmentCoins");

                    b.HasComment("Investment coin specifications");

                    b.HasData(
                        new
                        {
                            CoinId = 1,
                            Circulation = 10000,
                            CoinImagePath = "https://upload.wikimedia.org/wikipedia/commons/3/3a/1959_sovereign_Elizabeth_II_obverse.jpg",
                            CoinName = "Gold Sovereign",
                            Diameter = 22.050000000000001,
                            LegalTender = "GBP 1",
                            Manufacturer = "The Royal Mint",
                            Metal = 2,
                            Packaging = "Protective Capsule",
                            Price = 1000.00m,
                            Purity = 0.91669999999999996,
                            Quality = 1,
                            Weight = 7.9800000000000004
                        },
                        new
                        {
                            CoinId = 2,
                            Circulation = 5000,
                            CoinImagePath = "https://assets.goldeneaglecoin.com/resource/productimages/2020-SE-obv.jpg",
                            CoinName = "Silver Eagle",
                            Diameter = 40.600000000000001,
                            LegalTender = "USD 1",
                            Manufacturer = "United States Mint",
                            Metal = 1,
                            Packaging = "Plastic Tube",
                            Price = 50.00m,
                            Purity = 0.999,
                            Quality = 1,
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            CoinId = 3,
                            Circulation = 1000,
                            CoinImagePath = "https://media.tavid.ee/v7/_product_catalog_/1-oz-canadian-maple-leaf-silver-coin/canadian_maple_leaf_1oz_silver_coin_reverse.jpg?height=960&width=960&func=cropfit",
                            CoinName = "Silver Maple Leaf",
                            Diameter = 30.0,
                            LegalTender = "CAD 50",
                            Manufacturer = "Royal Canadian Mint",
                            Metal = 1,
                            Packaging = "Assay Card",
                            Price = 500.00m,
                            Purity = 0.99950000000000006,
                            Quality = 3,
                            Weight = 31.100000000000001
                        });
                });

            modelBuilder.Entity("KolevDiamonds.Infrastructure.Data.Models.InvestmentDiamond", b =>
                {
                    b.Property<int>("DiamondId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Diamond unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiamondId"), 1L, 1);

                    b.Property<double>("Carats")
                        .HasColumnType("float")
                        .HasComment("How much carats is the diamond");

                    b.Property<string>("CertifyingLaboratory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The certifying gemological laboratory");

                    b.Property<int>("Clarity")
                        .HasColumnType("int")
                        .HasComment("What clarity is the diamond");

                    b.Property<int>("Colour")
                        .HasColumnType("int")
                        .HasComment("What color is the diamond");

                    b.Property<int>("Cut")
                        .HasColumnType("int")
                        .HasComment("How well the diamond is cut");

                    b.Property<string>("DiamondImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Server file system image path");

                    b.Property<string>("DiamondName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Name of the diamond");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the product");

                    b.Property<string>("Proportions")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The proportions of the diamond");

                    b.HasKey("DiamondId");

                    b.ToTable("InvestmentDiamonds");

                    b.HasComment("Investment diamond specifications");

                    b.HasData(
                        new
                        {
                            DiamondId = 1,
                            Carats = 1.0,
                            CertifyingLaboratory = "GIA",
                            Clarity = 3,
                            Colour = 2,
                            Cut = 1,
                            DiamondImagePath = "https://www.diamondbanc.com/wp-content/uploads/2019/01/shutterstock_32731492-1024x681.jpg",
                            DiamondName = "Round Brilliant Diamond",
                            Price = 5000.00m,
                            Proportions = "Excellent"
                        },
                        new
                        {
                            DiamondId = 2,
                            Carats = 1.5,
                            CertifyingLaboratory = "IGI",
                            Clarity = 6,
                            Colour = 4,
                            Cut = 2,
                            DiamondImagePath = "https://www.qualitydiamonds.co.uk/media/1132/princess-diamond-top.png",
                            DiamondName = "Princess Cut Diamond",
                            Price = 7000.00m,
                            Proportions = "Very Good"
                        },
                        new
                        {
                            DiamondId = 3,
                            Carats = 2.0,
                            CertifyingLaboratory = "HRD",
                            Clarity = 7,
                            Colour = 3,
                            Cut = 3,
                            DiamondImagePath = "https://www.capediamonds.co.za/wp-content/uploads/2020/09/Emerald-Cut-Diamonds-Cape-Diamonds-Cape-Town-South-Africa.jpg",
                            DiamondName = "Emerald Cut Diamond",
                            Price = 10000.00m,
                            Proportions = "Good"
                        });
                });

            modelBuilder.Entity("KolevDiamonds.Infrastructure.Data.Models.MetalBar", b =>
                {
                    b.Property<int>("BarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Metal bar unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarId"), 1L, 1);

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Dimensions of the metal bar (length x width)");

                    b.Property<int>("Metal")
                        .HasColumnType("int")
                        .HasComment("Type of metal");

                    b.Property<string>("MetalBarImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Server file system image path");

                    b.Property<string>("MetalBarName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Name of the metal bar");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the product");

                    b.Property<string>("Purity")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Purity of the metal expressed in carat for gold or sample for silver");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasComment("Weight of the metal bar in grams");

                    b.HasKey("BarId");

                    b.ToTable("MetalBars");

                    b.HasComment("Metal bar specifications");

                    b.HasData(
                        new
                        {
                            BarId = 1,
                            Dimensions = "27 x 47 mm",
                            Metal = 2,
                            MetalBarImagePath = "https://m.media-amazon.com/images/I/61ICiCEk3TL._AC_UF894,1000_QL80_.jpg",
                            MetalBarName = "Gold Bar",
                            Price = 15000.00m,
                            Purity = "24 Karat",
                            Weight = 1000.0
                        },
                        new
                        {
                            BarId = 2,
                            Dimensions = "20 x 40 mm",
                            Metal = 1,
                            MetalBarImagePath = "https://www.monex.com/wp-content/uploads/2023/06/1-kilo-silver-bar-side.png",
                            MetalBarName = "Silver Bar",
                            Price = 500.00m,
                            Purity = "999.9/1000",
                            Weight = 1000.0
                        },
                        new
                        {
                            BarId = 3,
                            Dimensions = "25 x 50 mm",
                            Metal = 4,
                            MetalBarImagePath = "https://images.squarespace-cdn.com/content/v1/5719f32620c64744b886bcd2/1612970177011-TLIGBQ4ZDOODFX0TOR42/rose-gold-bar.png",
                            MetalBarName = "Rose Gold Bar",
                            Price = 20000.00m,
                            Purity = "24 Karat",
                            Weight = 1000.0
                        });
                });

            modelBuilder.Entity("KolevDiamonds.Infrastructure.Data.Models.Necklace", b =>
                {
                    b.Property<int>("NecklaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Necklace unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NecklaceId"), 1L, 1);

                    b.Property<double>("Carats")
                        .HasColumnType("float")
                        .HasComment("How much carats is the main diamond used in the necklace");

                    b.Property<int>("Clarity")
                        .HasColumnType("int")
                        .HasComment("What clarity is the main diamond in the necklace");

                    b.Property<int>("Colour")
                        .HasColumnType("int")
                        .HasComment("What color is the main diamond");

                    b.Property<int>("Cut")
                        .HasColumnType("int")
                        .HasComment("How well the diamond is cut");

                    b.Property<double>("Length")
                        .HasColumnType("float")
                        .HasComment("Length of the necklace in millimeters");

                    b.Property<int>("Metal")
                        .HasColumnType("int")
                        .HasComment("Metal, which necklace is made of");

                    b.Property<string>("NecklaceImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Server file system image path");

                    b.Property<string>("NecklaceName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Name of the necklace");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the product");

                    b.Property<string>("Purity")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Purity of the metal expressed in carat for gold or sample for silver");

                    b.HasKey("NecklaceId");

                    b.ToTable("Necklaces");

                    b.HasComment("Necklace specifications");

                    b.HasData(
                        new
                        {
                            NecklaceId = 1,
                            Carats = 2.5,
                            Clarity = 5,
                            Colour = 4,
                            Cut = 1,
                            Length = 450.0,
                            Metal = 2,
                            NecklaceImagePath = "https://i.etsystatic.com/6244698/r/il/8121e9/1697727663/il_570xN.1697727663_9elj.jpg",
                            NecklaceName = "Diamond Solitaire Necklace",
                            Price = 1500.00m,
                            Purity = "18K"
                        },
                        new
                        {
                            NecklaceId = 2,
                            Carats = 3.0,
                            Clarity = 7,
                            Colour = 14,
                            Cut = 2,
                            Length = 500.0,
                            Metal = 1,
                            NecklaceImagePath = "https://media.beaverbrooks.co.uk/i/beaverbrooks/G105854_0",
                            NecklaceName = "Sapphire Halo Necklace",
                            Price = 2000.00m,
                            Purity = "925"
                        },
                        new
                        {
                            NecklaceId = 3,
                            Carats = 2.7999999999999998,
                            Clarity = 4,
                            Colour = 1,
                            Cut = 1,
                            Length = 480.0,
                            Metal = 1,
                            NecklaceImagePath = "https://haverhill.com/cdn/shop/products/image_11085d78-83fb-429b-a153-15a90bc9ee30_1200x1200.jpg?v=1705428203",
                            NecklaceName = "Emerald Pendant Necklace",
                            Price = 1800.00m,
                            Purity = "925"
                        });
                });

            modelBuilder.Entity("KolevDiamonds.Infrastructure.Data.Models.Ring", b =>
                {
                    b.Property<int>("RingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Ring unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RingId"), 1L, 1);

                    b.Property<double>("Carats")
                        .HasColumnType("float")
                        .HasComment("How much carats is the main diamond used in the ring");

                    b.Property<int>("Clarity")
                        .HasColumnType("int")
                        .HasComment("What clarity is the main diamond in the ring");

                    b.Property<int>("Colour")
                        .HasColumnType("int")
                        .HasComment("What color is the main diamond");

                    b.Property<int>("Cut")
                        .HasColumnType("int")
                        .HasComment("How well the diamond is cut");

                    b.Property<int>("Metal")
                        .HasColumnType("int")
                        .HasComment("Metal, which ring is made of");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the product");

                    b.Property<string>("Purity")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Purity of the metal expressed in carat for gold or sample for silver");

                    b.Property<string>("RingImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Server file system image path");

                    b.Property<string>("RingName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Name of the ring");

                    b.HasKey("RingId");

                    b.ToTable("Rings");

                    b.HasComment("Ring specifications");

                    b.HasData(
                        new
                        {
                            RingId = 1,
                            Carats = 1.5,
                            Clarity = 5,
                            Colour = 4,
                            Cut = 2,
                            Metal = 2,
                            Price = 1000.00m,
                            Purity = "18K",
                            RingImagePath = "https://www.tanishq.co.in/on/demandware.static/-/Sites-Tanishq-product-catalog/default/dw5721e8ec/images/hi-res/50D2FFFFRAA02_1.jpg",
                            RingName = "Gold Diamond Ring"
                        },
                        new
                        {
                            RingId = 2,
                            Carats = 4.0,
                            Clarity = 3,
                            Colour = 4,
                            Cut = 1,
                            Metal = 2,
                            Price = 10020.00m,
                            Purity = "18K",
                            RingImagePath = "https://4.imimg.com/data4/QW/YU/FUSIONI-3520335/prod-image.jpg",
                            RingName = "Gold Ring With Crown Diamond"
                        },
                        new
                        {
                            RingId = 3,
                            Carats = 3.0,
                            Clarity = 5,
                            Colour = 4,
                            Cut = 1,
                            Metal = 4,
                            Price = 12000.00m,
                            Purity = "18K",
                            RingImagePath = "https://love-and-co.com/cdn/shop/files/CR591-LGD_lifestyle.jpg?v=1697793277&width=2000",
                            RingName = "Rose Gold Diamond Ring"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
